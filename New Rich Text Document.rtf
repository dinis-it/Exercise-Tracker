{\rtf1}

- create container for each model list
- create partial CRUD for every model
- re-render relevant list when something changes
- use regular forms or formsets, probably forms.
- include add-child button in the rendered html where relevant

plan B: javascript


Database:
- make each set its own thing, with comment?
- check what needs its own model vs fixed choices

Users:
- view profile
    - archiveindexview?
    - sidebar (last workouts)
        - decide what to display
    - PRs?
    - Goals?
- recover account
    - send email token
    - validate
    - change password
- delete user

Workout:
 - add workout
    - add sets, reps when applicable 
    - set time manually
    - timer(js?)
    - total reps, total volume
    - add type
    - add tag
- workout history page (pagination)

Nav:
    - dropdowns

Misc:
- messages
- nav
- footer
- tests?
- weight(t) graph, exercise(t) graphs

Style:
- BOOTSTRAP
- add classes
- forms
- profile
- nav
- footer
- workout
- workout list



- list triggered by post requests
- add edit, delete to list

htmx
- use swap with target to decide where the response goes
-point to list?